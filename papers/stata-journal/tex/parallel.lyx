#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass statapress
\begin_preamble
% main.tex - a driver for your Stata Journal insert
%
% This file should only be changed according to the AUTHOR notes below.
%
% The Stata Press document class

%Make locally deterministic
\pdfinfo{ /Creator ()  /Producer () /ModDate ()  /CreationDate () }
\pdftrailerid{} %Remove ID
\pdfsuppressptexinfo15 %Suppress PTEX.Fullbanner and info of imported PDFs

% Page dimensions
\usepackage[crop,newcenter,frame]{pagedims}


% The Stata Journal styles
\usepackage{sj}


% Encapsulated PostScript figures
\usepackage{epsfig}

\usepackage{booktabs}

% Stata Log listings and useful macros
\usepackage{stata}
\usepackage[english]{babel}

% Shadow package to render technical note figure
\usepackage{shadow}


% Author packages
\usepackage{tikz}
\usepackage{tabularx}\usetikzlibrary{arrows, fit,positioning}
\usepackage{booktabs}


% EDITORS: volume number, issue number, month, and year
\sjsetissue{$vv$}{$ii$}{$mm$}{$yyyy$}
\end_preamble
\use_default_options true
\begin_modules
graphicboxes
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author -1260403458 "George"
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
inserttype[st0001]{article}
\end_layout

\end_inset


\end_layout

\begin_layout Title
\begin_inset Argument 1
status open

\begin_layout Plain Layout
parallel
\end_layout

\end_inset

Parallel: Stata module for parallel computing
\end_layout

\begin_layout Author
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Vega Yon, Quistorff
\end_layout

\end_inset

George G.
 Vega Yon
\begin_inset Newline newline
\end_inset

University of Southern California
\begin_inset Newline newline
\end_inset

Los Angeles, CA
\begin_inset Newline newline
\end_inset

vegayon@usc.edu 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Brian Quistorff
\begin_inset Newline newline
\end_inset

Microsoft AI & Research
\begin_inset Newline newline
\end_inset

Redmond, WA
\begin_inset Newline newline
\end_inset

Brian.Quistorff@microsoft.com
\end_layout

\begin_layout Abstract
The 
\family typewriter
parallel
\family default
 package allows parallel processing of tasks that are not inter-dependent.
 This allows all flavors of Stata to take advantage of multiprocessor machines.
 Even Stata/MP users can benefit as many user-written programs are not automatic
ally parallelized but could be so under our framework.
 
\end_layout

\begin_layout Abstract
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
keywords{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
inserttag
\end_layout

\end_inset

, parallel computing, simulations, high performance computing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Sandbox example (left out for now)
\end_layout

\begin_layout Itemize
(G) I use the 'sandbox' in order to avoid overwriting processes.
 This is an issue when you have multiple computers or sessions of stata
 running at the same time.
 Furthermore, this was a measure to avoid removing files that are currently
 in use, for example, when you use parallel clean, all it will remove all
 the files generated by parallel (regardless of the parallel_id number)
 but those of which currently in use (see https://github.com/gvegayon/parallel/bl
ob/c474d5973e42d64b0e37ba235dddfbe4ea2dbca7/ado/parallel_clean.mata#L10 and
 https://github.com/gvegayon/parallel/blob/c474d5973e42d64b0e37ba235dddfbe4ea2dbc
a7/ado/parallel_sandbox.mata#L33).
 parallel_sandbox creates a file called __pll[parallel_id]sandbox that is
 used by parallel_clean and parallel_sandbox itself when creating/removing
 files.
 At least in my experience this was critical.
 PS: I understand that sandbox in computer science is a different concept,
 but I just started to used it this way and just stick with it...
 we can change it if you want =).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Notes: 
\end_layout

\begin_layout Itemize
Hyperlink doesn't seem to work in this document.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Parallel computing
\begin_inset CommandInset label
LatexCommand label
name "sec:desc"

\end_inset


\end_layout

\begin_layout Standard
Most computers currently have multiple 
\begin_inset Quotes eld
\end_inset

processors
\begin_inset Quotes erd
\end_inset

.

\change_deleted -1260403458 1540362018
 Physically there may be multiple 
\begin_inset Quotes eld
\end_inset

cores
\begin_inset Quotes erd
\end_inset

 in one 
\begin_inset Quotes eld
\end_inset

socket
\begin_inset Quotes erd
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
aka 
\begin_inset Quotes eld
\end_inset

package
\begin_inset Quotes erd
\end_inset

/
\begin_inset Quotes eld
\end_inset

chip carrier
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

, and multiple sockets in one system.
 There may be more logical processors if the cores use simultaneous multithreadi
ng (e.g.
 Intel's Hyper-Threading Technology).
 
\change_inserted -1260403458 1540362032
 
\change_unchanged
Stata currently uses only one processor except for Stata/MP with certain
 built-in commands
\begin_inset Foot
status open

\begin_layout Plain Layout
For a list of commands explicitly parallelized see the Stata/MP Performance
 Report (
\begin_inset CommandInset citation
LatexCommand cite
key "stata2010"
literal "true"

\end_inset

).
\end_layout

\end_inset

.
 Many other tasks, however, are logically very easy to parallelize.
 These tasks, called 
\begin_inset Quotes eld
\end_inset

embarrassingly parallel
\begin_inset Quotes erd
\end_inset

, are ones where there are no dependencies (or need for communication) between
 the parallel tasks
\change_inserted -1260403458 1540362200
, for example, reshaping a large dataset, boostrapping and its alike, the
 jacknife, Monte carlo simulations, etc.
\change_deleted -1260403458 1540362206
.

\change_unchanged
 We provide here the package 
\family typewriter
parallel
\family default
, to parallelize these tasks.
\begin_inset Foot
status open

\begin_layout Plain Layout
More 
\begin_inset Quotes eld
\end_inset

fine-grained
\begin_inset Quotes erd
\end_inset

 parallelism, where tasks need to communicate frequently, could be handled
 but there is no direct support.
\end_layout

\end_inset


\change_inserted -1260403458 1540362318

\end_layout

\begin_layout Standard

\change_inserted -1260403458 1540362474
In general, the way that parallel works is essentially creating multiple
 Stata instancs in which each one of these has its own copy of whatever
 data it is supposed to work with.
 By doing this, embarrasingly parallel tasks can be distributed across those
 instances taking advantage of the user's multicore computer.
 
\change_deleted -1260403458 1540362475

\end_layout

\begin_layout Standard
The primary process used is to invoke 
\family typewriter
parallel
\family default
 with a command (or do-file) across 
\begin_inset Formula $N$
\end_inset

 parallel child processes.
 It proceeds as follows,
\end_layout

\begin_layout Enumerate

\family typewriter
parallel
\family default
 splits the dataset into 
\begin_inset Formula $N$
\end_inset

 pieces.
\end_layout

\begin_layout Enumerate

\family typewriter
parallel
\family default
 starts 
\begin_inset Formula $N$
\end_inset

 new instances of Stata.
 These are referred to as child processes while the original is the parent.
 In each, one of the pieces of the split dataset is loaded, the command
 is executed, and the resultant data is saved.
\end_layout

\begin_layout Enumerate

\family typewriter
parallel
\family default
 waits for the child processes to finish and then aggregates the resultant
 datasets and loads this into memory.
 
\end_layout

\begin_layout Standard
This is diagrammed in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:howworks"

\end_inset

.
 Notice that this is a setting with 
\begin_inset Quotes eld
\end_inset

distributed
\begin_inset Quotes erd
\end_inset

 rather than shared memory between the child processes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset CommandInset include
LatexCommand input
filename "tables_and_figures/diagram.tex"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
How 
\family typewriter
parallel
\family default
 works
\begin_inset CommandInset label
LatexCommand label
name "fig:howworks"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are two considerations that limit the parallelization in practice.
 First, it will never be useful to use more child processes than the number
 of processors on the machine.
 Second, processing a task in parallel using 
\family typewriter
parallel
\family default
 uses more memory (i.e.
 RAM).
 One is trading memory capacity for processing capacity.
 Therefore, there is likely to be little benefit if a sequential setup would
 already utilize close to all of the system memory
\change_deleted -1260403458 1540362744
.
\change_inserted -1260403458 1540362829
.
 This way, in the simplest case, when splitting the dataset, the child processes
' memory will add up tp tje same amount of memory used in the parent Stata
 instance.
 And to this add the amount of memory that Stata uses while doing some operation
s such as matrix invertion.
\change_deleted -1260403458 1540362744

\end_layout

\begin_layout Standard
Some existing solution are able to take advantage of multiprocessors systems
\change_inserted -1260403458 1540362862
 while implementing a shared memory model
\change_unchanged
.
 Stata/MP is a 
\change_deleted -1260403458 1540362898
version
\change_inserted -1260403458 1540362904
flavor of Stata
\change_unchanged
 where internal routines are able to take advantage of multiple processors
 on a machine.
 
\family typewriter
parallel
\family default
 allows this for generic commands which both expands the set of possible
 parallelizations and allows this for single-threaded flavors of Stata.
 This module is similar to R's 
\family typewriter
parallel
\family default
 package (superseding the 
\family typewriter
snow
\family default
 package) and Matlab's parallel toolbox.
\end_layout

\begin_layout Standard
The 
\change_deleted -1260403458 1540362982
document
\change_inserted -1260403458 1540363054
rest of the paper introduces more details about the usage of the command,
 and provides examples and benchmarks for the reader to get a better understandi
ng of the potential benefits of using 
\family typewriter
parallel
\change_deleted -1260403458 1540363062

\family default
 proceeds as follows.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Syntax"

\end_inset

 discusses the details of execution, section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:examples"

\end_inset

 provides some usage examples, section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Benchmarks"

\end_inset

 provides some execution speed details, and section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:discussion"

\end_inset

 discusses and concludes
\change_unchanged
.
\end_layout

\begin_layout Section
A Stata module for parallel computing
\begin_inset CommandInset label
LatexCommand label
name "sec:Syntax"

\end_inset


\end_layout

\begin_layout Standard
In this section we discuss the syntax of the 
\family typewriter
parallel
\family default
 subcommands, technical details of execution, and results returned from
 the commands.
\end_layout

\begin_layout Subsection
Syntax and options
\end_layout

\begin_layout Standard
A typical program will use separate 
\family typewriter
parallel
\family default
 subcommands for initialization, parallel task execution, and finally for
 cleanup.
 Diagnostic tool commands are also available
\change_inserted -1260403458 1540363407
 for those cases in which the user needs to debug its code to address possible
 failures reported by 
\family typewriter
parallel
\change_unchanged

\family default
.
 
\end_layout

\begin_layout Subsubsection
Initialization
\end_layout

\begin_layout Standard
To initialize the parallel setup use the 
\family typewriter
initialize
\family default
 subcommand 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel initialize
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{
\end_layout

\begin_layout Plain Layout

    {
\backslash
it 
\backslash
#},
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{f}orce
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{s}tatapath({
\backslash
it path})
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{i}ncludefile({
\backslash
it filename})}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main usage of this command is to set the number of child processes to
 launch when parallelizing later tasks.
 Options:
\end_layout

\begin_layout Itemize

\family typewriter
#
\family default
 - The number of child processes to use.
 If omitted the default is to use 
\begin_inset Formula $\max(\lfloor(\mathrm{num\ processors})\cdot0.75\rfloor,1)$
\end_inset

.
 If there are multiple processors, the default will leave some free for
 other computer interactions, which should be fine for testing on a personal
 computer.
 Note that when using Stata/MP with child tasks that are automatically paralleli
zed by Stata, care should be taken with this option and the 
\family typewriter
processors()
\family default
 option for the execution so as not to inadvertently use more processors
 than are available.
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{f}
\end_layout

\end_inset

orce
\family default
 - To prevent slowdowns there is a soft limit that restricts setting the
 number of child processes to be more than the number of processors on the
 system.
 Use this option to override the limit.
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{s}
\end_layout

\end_inset

tatapath(
\emph on
stata_path
\emph default
)
\family default
 - By default, 
\family typewriter
parallel
\family default
 tries to automatically identify Stata's executable path.
 Using this option will override this and force 
\family typewriter
parallel
\family default
 to use a specific path to the executable.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{i}
\end_layout

\end_inset

ncludefile(
\emph on
filename
\emph default
)
\family default
 - This file will be 
\family typewriter
include
\family default
d in the child processes before the parallelized tasks are executed.
 This allows one to copy over preferences that 
\family typewriter
parallel
\family default
 does not copy automatically (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Technical-Details"

\end_inset

).
 
\end_layout

\begin_layout Standard
Use the following subcommand to determine the number of processors on a
 system.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel numprocessors
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Parallel task execution
\end_layout

\begin_layout Standard
The following are subcommands that execute tasks in parallel.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel 
\backslash
optional{,
\end_layout

\begin_layout Plain Layout

    by({
\backslash
it varlist})
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{f}orce
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{nod}ata
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{set}parallelid({
\backslash
it pll
\backslash
_id})
\end_layout

\begin_layout Plain Layout

    {
\backslash
it execution
\backslash
_options}} : {
\backslash
it command}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel do
\end_layout

\begin_layout Plain Layout

    {
\backslash
it dofile}
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{,
\end_layout

\begin_layout Plain Layout

    by({
\backslash
it varlist})
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{f}orce
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{nod}ata
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{set}parallelid({
\backslash
it pll
\backslash
_id})
\end_layout

\begin_layout Plain Layout

    {
\backslash
it execution
\backslash
_options}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel bs
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{,
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{exp}ression({
\backslash
it exp
\backslash
_list})
\end_layout

\begin_layout Plain Layout

    {
\backslash
it execution
\backslash
_options}
\end_layout

\begin_layout Plain Layout

    {
\backslash
it bs
\backslash
_options}} 
\backslash
optional{: {
\backslash
it command}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel sim
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{,
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{exp}ression({
\backslash
it exp
\backslash
_list})
\end_layout

\begin_layout Plain Layout

    {
\backslash
it execution
\backslash
_options}
\end_layout

\begin_layout Plain Layout

    {
\backslash
it sim
\backslash
_options}} 
\backslash
optional{: {
\backslash
it command}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel append
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{{
\backslash
it file(s)}}, 
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{d}o({
\backslash
it command|dofile}) 
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{in({
\backslash
it in}) if({
\backslash
it if}) 
\backslash
underbar{e}xpression({
\backslash
it expand expression}) {
\backslash
it execution
\backslash
_options}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The : (prefix) notation for 
\family typewriter
parallel
\family default
 and the 
\family typewriter
do
\family default
 subcommand are the main subcommands while the others are helper utilities.
 Their usage is shown in sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:examples"

\end_inset

.
\end_layout

\begin_layout Standard

\family typewriter
\emph on
execution_options
\family default
\emph default
: 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{k}
\end_layout

\end_inset

eep
\family default
 - Keeps auxiliary files generated by 
\family typewriter
parallel
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{keepl}
\end_layout

\end_inset

ast
\family default
 - Keeps auxiliary files and removes those saved prior to the current execution.
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{nog}
\end_layout

\end_inset

lobal
\family default
 - Avoids passing current session's global macros to the child processes.
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{prog}
\end_layout

\end_inset

rams(
\emph on
namelist
\emph default
)
\family default
 - A list of programs to be passed to each child processes.
 To do this, 
\family typewriter
parallel
\family default
 needs to print the contents of those programs to the output window.
 If 
\family typewriter
parallel
\family default
 is being run from inside an ado file (say 
\family typewriter
my_cmd.ado
\family default
) and will need to access auxiliary local subroutines (other programs defined
 in the ado), then their names must be passed in as 
\family typewriter
<main command name.local subrouting name>
\family default
 (e.g.
 
\family typewriter
my_cmd.aux_prog
\family default
) for them to be accessible.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{m}
\end_layout

\end_inset

ata
\family default
 - If the algorithm needs to use Mata objects, this option causes each child
 process to receive every Mata object loaded in the current session (including
 functions).
 Note that when Mata objects are loaded into the child processes they will
 have different locations and therefore pointers may no longer be accurate.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{randt}
\end_layout

\end_inset

ype(current|datetime|random.org)
\family default
 - Tells 
\family typewriter
parallel
\family default
 whether to use the current random number generator seed (default), the
 current datetime or random.org API to generate the seeds for each child
 process.
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{s}
\end_layout

\end_inset

eeds(
\emph on
numlist
\emph default
)
\family default
 - With this option the user can pass specific random seeds to be used within
 each child process.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{proc}
\end_layout

\end_inset

essors(
\emph on
integer
\emph default
)
\family default
 - If running on Stata/MP, sets the number of processors each child process
 should use.
 The default value is 0 which means to take no specific change in the child
 processes.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{t}
\end_layout

\end_inset

imeout(
\emph on
integer
\emph default
)
\family default
 - If a child process hasn't started, how much time in seconds does 
\family typewriter
parallel
\family default
 wait until it assumes that there was a connection error and thus the child
 process won't start.
 The default value is 60.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{out}
\end_layout

\end_inset

putopts(
\emph on
namelist
\emph default
)
\family default
 - Allows generic file-based appending.
 First, imagine a non-parallel setup where a program generates multiple
 outputs and the extra outputs are stored in files as in
\begin_inset Newline newline
\end_inset


\family typewriter
.
\begin_inset space \qquad{}
\end_inset

my_prog, output1(outputfile1.dta) output2(outputfile2.dta)
\family default
 
\begin_inset Newline newline
\end_inset

With 
\family typewriter
parallel
\family default
 we add the option 
\family typewriter
outputopts(output1 output2)
\family default
 as in 
\family typewriter

\begin_inset Newline newline
\end_inset

.
\begin_inset space \qquad{}
\end_inset

parallel, outputopts(output1 output2): my_prog, output1(outputfile1.dta)
 output2(outputfile2.dta)
\family default

\begin_inset Newline newline
\end_inset

This causes 
\family typewriter
parallel
\family default
 to run the parallel tasks with their own pair of temporary files passed
 in for 
\family typewriter
output1
\family default
 and 
\family typewriter
output2
\family default
 and then aggregates those to create 
\family typewriter
outputfile1.dta
\family default
 and 
\family typewriter
outputfile2.dta
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{det}
\end_layout

\end_inset

erministicoutput
\family default
 will eliminate displayed output that would vary depending on the machine
 (e.g.
 timers, seeds, and number of parallel child processes) so that log files
 can be easily compared across runs.
 Errors are still printed.
\end_layout

\begin_layout Itemize

\family typewriter
\emph on
dofile
\family default
\emph default
/
\family typewriter
command
\family default
 - Task to run in parallel.
 Note that while the prefix notation can handle parameters passed to the
 user command, 
\family typewriter
parallel do
\family default
 can not handle parameters passed to a do file.
\end_layout

\begin_layout Standard
Main 
\family typewriter
parallel
\family default
 subcommand options:
\end_layout

\begin_layout Itemize

\family typewriter
by(
\emph on
varlist
\emph default
)
\family default
 - Tells the command through which observations the current dataset can
 be divided, avoiding splitting stories (panels) over two or more child
 processes.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
The semantics for 
\family typewriter
by
\family default
 are not the same as for Stata.
 When Stata implements 
\family typewriter
by
\family default
, the command that is run will only see a section of the data where the
 
\family typewriter
by
\family default
-variables are the same.
 
\family typewriter
parallel
\family default
's semantics are that no observations with the same 
\family typewriter
by
\family default
-values will be in different child processes.
 It pools together combinations when there are fewer child processes than
 
\family typewriter
by
\family default
-var combinations.
 If Stata-style semantics are needed, the solution is to add 
\family typewriter
by
\family default
 in the subcommand.
 For example,
\begin_inset Newline newline
\end_inset


\family typewriter
.
 parallel, by(byvar): by byvar: egen x_max = max(x)
\family default
.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{f}
\end_layout

\end_inset

orce
\family default
 - When using 
\family typewriter
by()
\family default
, 
\family typewriter
parallel
\family default
 checks whether the dataset is properly sorted.
 The 
\family typewriter
force
\family default
 option skips this check.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{nod}
\end_layout

\end_inset

ata
\family default
 - Tells 
\family typewriter
parallel
\family default
 not to use loaded data and thus not to try splitting at the beginning or
 appending anything at the end.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{set}
\end_layout

\end_inset

parallelid(
\emph on
pll_id
\emph default
)
\family default
 - Forces 
\family typewriter
parallel
\family default
 to use a specific id.
\end_layout

\begin_layout Standard
Bootstrap options
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{exp}
\end_layout

\end_inset

ression(
\emph on
exp_list
\emph default
)
\family default
 - An expression list to be passed to the native 
\family typewriter
bootstrap
\family default
 command.
\end_layout

\begin_layout Itemize

\family typewriter
\emph on
bs_options
\family default
\emph default
 - Further options to be passed to the native 
\family typewriter
bootstrap
\family default
 command, including the optional 
\family typewriter
reps()
\family default
 parameter.
\end_layout

\begin_layout Standard
Simulation options:
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{exp}
\end_layout

\end_inset

ression(
\emph on
exp_list
\emph default
)
\family default
 - An expression list to be passed to the native 
\family typewriter
simulate
\family default
 command.
\end_layout

\begin_layout Itemize

\family typewriter
\emph on
sim_options
\family default
\emph default
 - Further options to be passed to the native 
\family typewriter
simulate
\family default
 command, including the required 
\family typewriter
reps()
\family default
 parameter.
\end_layout

\begin_layout Standard
Append options:
\end_layout

\begin_layout Itemize

\family typewriter
\emph on
file(s)
\family default
\emph default
 - Explicit list of files to process.
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{e}
\end_layout

\end_inset

xpression(
\emph on
expand expression
\emph default
)
\family default
 - Expression representing file names in the form of "
\family typewriter
%fmts, numlist1 [, numlist2 [, ...]]
\family default
" 
\end_layout

\begin_layout Itemize

\family typewriter
in(
\emph on
in
\emph default
)/if(
\emph on
if
\emph default
)
\family default
 - Opens the file using 
\family typewriter
if
\family default
 and 
\family typewriter
in
\family default
 accordingly.
\end_layout

\begin_layout Subsubsection
Cleanup
\end_layout

\begin_layout Standard
Log files from 
\family typewriter
parallel
\family default
 execution are saved so that they can be inspected by the user.
 Use the 
\family typewriter
clean
\family default
 subcommand to remove these and any other ancillary files that have been
 saved:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel clean
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{, 
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{e}vent({
\backslash
it pll
\backslash
_id})
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{a}ll
\end_layout

\begin_layout Plain Layout

    
\backslash
underbar{f}orce}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Options:
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{e}
\end_layout

\end_inset

vent(
\emph on
pll_id
\emph default
)
\family default
 - Specifies which executed (and stored) event's 
\change_inserted -1260403458 1540365357
(a given run of 
\family typewriter
parallel
\family default
) 
\change_unchanged
files should be removed.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{a}
\end_layout

\end_inset

ll
\family default
 - Tells 
\family typewriter
parallel
\family default
 to remove every remaining auxiliary files generated by it in the current
 directory.
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{f}
\end_layout

\end_inset

orce
\family default
 - Forces the command to remove (apparently) in-use auxiliary files.
 Otherwise these will not get deleted.
 
\change_inserted -1260403458 1540365415

\end_layout

\begin_layout Standard

\change_inserted -1260403458 1540365504
By default,
\family typewriter
 parallel
\family default
 will use the most recent run's 
\family typewriter
\emph on
pll_id
\family default
\emph default
 if not provided by the user.
\end_layout

\begin_layout Subsubsection
Diagnostic tools
\end_layout

\begin_layout Standard
Additionally there are some diagnostic tools,
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel version
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This command returns the version both to the screen and programmatically.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel printlog
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{{
\backslash
it 
\backslash
#}} 
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{, 
\backslash
underbar{e}vent({
\backslash
it pll
\backslash
_id})}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

parallel viewlog
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{{
\backslash
it 
\backslash
#}}  
\end_layout

\begin_layout Plain Layout

    
\backslash
optional{, 
\backslash
underbar{e}vent({
\backslash
it pll
\backslash
_id})}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These commands allow users to view logs of the child processes.
 The initial part of the log file will be from commands generated by 
\family typewriter
parallel
\family default
 for setting up the child process (loading data, global macros, settings,
 etc.).
 The final part of the log file is where the users task is run.
 Options:
\end_layout

\begin_layout Itemize
# - specifies which child process number of an event to display (default
 is 1).
 
\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
underbar{e}
\end_layout

\end_inset

vent(
\emph on
pll_id
\emph default
)
\family default
 - Specifies which event's log file should be displayed
\end_layout

\begin_layout Subsection
Saved Results
\end_layout

\begin_layout Standard
The primary result of
\family typewriter
 parallel
\family default
 is to return a transformed dataset.
 In addition 
\family typewriter
parallel
\family default
 returns the following values:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features islongtable="true" longtabularalignment="left">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="3in">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scalars
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

r(pll_n)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of parallel child processes last used.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

r(pll_t_fini)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time spent appending and cleaning.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

r(pll_t_calc)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time spent completing the parallel job.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

r(pll_t_setu)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time spent setting up (before the parallelization) and to finishing the
 job (after the parallelization).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

r(pll_errs)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of child processes which stopped with an error.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Global Macros
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

LAST_PLL_DIR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A copy of 
\family typewriter
r(pll_dir)
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

LAST_PLL_N
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A copy of 
\family typewriter
r(pll_n)
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

LAST_PLL_ID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A copy of 
\family typewriter
r(pll_id)
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

PLL_LASTRNG
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of times that 
\family typewriter
parallel_randomid()
\family default
 has been executed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

PLL_STATA_PATH, PLL_CLUSTERS, USE_PROCEXEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Internal usage.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
parallel version
\family default
 saves
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="left">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="3in">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Macros
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

r(pll_vers)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Current version of the module.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
parallel bs
\family default
 and 
\family typewriter
parallel sim
\family default
 save
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="left">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="3in">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scalars
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

e(pll)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Technical Details
\begin_inset CommandInset label
LatexCommand label
name "subsec:Technical-Details"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
parallel
\family default
 does not change the random number generator state upon completion.
 Subcommands that invoke randomization functions restore the state before
 finishing.
 
\end_layout

\begin_layout Standard
Log files from the children are stored in 
\family typewriter
c(tmpdir)
\family default
 so that they can be inspected by the user.
 The user will likely want to delete these periodically with 
\family typewriter
parallel clean, all
\family default
.
\end_layout

\begin_layout Standard
Given 
\begin_inset Formula $N$
\end_inset

 child processes, within each child process 
\family typewriter
parallel
\family default
 creates the macros 
\family typewriter
pll_id
\family default
 (equal for all the child processes) and 
\family typewriter
pll_instance
\family default
 (ranging 
\begin_inset Formula $1$
\end_inset

 up to 
\begin_inset Formula $N$
\end_inset

, equaling 
\begin_inset Formula $1$
\end_inset

 inside the first child process and 
\begin_inset Formula $N$
\end_inset

 inside the last child process), both as global and local macros.
 This allows the user to set different tasks/actions depending on the child
 process number.
 Additionally, the global macro 
\family typewriter
PLL_CLUSTERS
\family default
 (equal to 
\begin_inset Formula $N$
\end_inset

) is available within each child process.
 Note that the locals will be not available inside of programs that are
 called from 
\family typewriter
parallel
\family default
 (in prefix or do-file setup), but will be available inside a script called
 from 
\family typewriter
parallel do
\family default
.
\end_layout

\begin_layout Standard
When launching child Stata processes, several settings are automatically
 copied over.
 These include the 
\family typewriter
PLUS
\family default
 and 
\family typewriter
PERSONAL
\family default
 sysdirs, the global 
\family typewriter
S_ADO
\family default
, the mlib search index, and the 
\family typewriter
tempname
\family default
/
\family typewriter
tempvar
\family default
 state.
 To start child processes with additional setting changes then one should
 use the 
\family typewriter
includefile()
\family default
 option.
\end_layout

\begin_layout Standard
Child processes are managed.
 If the task is stopped from the parent process then all child processes
 will be killed directly.
 The parent process can recover from both errors in the child Stata program
 and if child Stata processes are killed by the operating system.
 Child processes are launched using the shell on MacOS and Unix/Linux machines.
 On Windows machines a compiled plugin launches the child processes using
 the Win32 API.
 Windows uses a different system as batch-mode Windows will not execute
 shell commands and there is no console-only version of Stata so every launched
 process will annoyingly flash on the screen and steal the user interface's
 focus.
 
\end_layout

\begin_layout Standard
Results not explicitly saved in the child processes's datasets will not
 be available afterward (e.g.
 matrices, scalars, Mata objects, returns).
 Programs can often be modified to aggregate data in the primary dataset
 or using secondary files (see the 
\emph on
outputopts
\emph default
 options).
\end_layout

\begin_layout Standard
Although 
\family typewriter
parallel
\family default
 passes-through programs, macros and Mata objects, in the current version
 it is not capable of doing the same with matrices or scalars.
 
\end_layout

\begin_layout Standard
If the number of tasks to be done is less than the number of child processes,
 
\family typewriter
parallel
\family default
 will temporarily reduce the number of child processes.
 This is reported in the global macro 
\family typewriter
LAST_PLL_N
\family default
.
 
\end_layout

\begin_layout Standard
Expressions run in the child-processes that contain 
\family typewriter
_n
\family default
 or 
\family typewriter
_N
\family default
 will be evaluated locally to the child not the parent dataset.
 These expressions may therefore be different if run in 
\family typewriter
parallel
\family default
 than without 
\family typewriter
parallel
\family default
.
\change_inserted -1260403458 1540363924

\end_layout

\begin_layout Subsection

\change_inserted -1260403458 1540364096
Extending parallel
\end_layout

\begin_layout Standard

\change_inserted -1260403458 1540364973
One of the key features of 
\family typewriter
parallel
\family default
 lies on its developer-friendly design.
 Motivated by ease of code maitenence, 
\family typewriter
parallel
\family default
's design consists on a rich and throughly documented API that facilitates
 the creation of new routines.
 Mostly implemented in Mata, 
\family typewriter
parallel
\family default
's API contains functions for spliting datasets, exporting Mata and Stata
 routines, writing do-files to be executed by the child processes, lunch
 Stata instances, monitor child processes, and collecting the results generated
 by the child instances.
\end_layout

\begin_layout Standard

\change_inserted -1260403458 1540365143
To the date, we have knowledge of at least three Stata modules that make
 use of the API: EVENTSTUDY2, MIPARALLE, and Synth_Runner–the last developed
 by one of us.
\change_unchanged

\end_layout

\begin_layout Subsection
Installation
\begin_inset CommandInset label
LatexCommand label
name "subsec:Installation"

\end_inset


\end_layout

\begin_layout Standard
Stable versions of 
\family typewriter
parallel
\family default
 can be installed from the SSC archives.
 The latest development versions can be installed install the latest version
 using
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 net install parallel, ///
\end_layout

\begin_layout Plain Layout

    from(https://raw.github.com/gvegayon/parallel/master/)
\end_layout

\begin_layout Plain Layout

.
 mata mata mlib index 
\end_layout

\end_inset

If one is switching the source of the installation materials (e.g.
 if moving from SSC to GitHub versions), then be sure to uninstall the program
 explicitly before installing the new version.
\end_layout

\begin_layout Section
Examples
\begin_inset CommandInset label
LatexCommand label
name "sec:examples"

\end_inset


\end_layout

\begin_layout Standard
In this section we discuss basic usage of the commands as some common use
 cases.
\end_layout

\begin_layout Subsection
Subcommand examples
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{stexample}[Example Prefix]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A minimal example of using 
\family typewriter
parallel
\family default
 is
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 sysuse auto, clear 
\end_layout

\begin_layout Plain Layout

(1978 Automobile Data)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

.
 parallel initialize 2
\end_layout

\begin_layout Plain Layout

N Child processes: 2 
\end_layout

\begin_layout Plain Layout

Stata dir:  C:
\backslash
Program Files (x86)
\backslash
Stata14/StataMP-64.exe 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

.
 parallel: gen price2 = price*price
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------- 
\end_layout

\begin_layout Plain Layout

Parallel Computing with Stata 
\end_layout

\begin_layout Plain Layout

Child processes: 2 
\end_layout

\begin_layout Plain Layout

pll_id         : <unique ID> 
\end_layout

\begin_layout Plain Layout

Running at     : <pwd> 
\end_layout

\begin_layout Plain Layout

Randtype       : datetime 
\end_layout

\begin_layout Plain Layout

Waiting for the child processes to finish...
 
\end_layout

\begin_layout Plain Layout

child process 0001 has exited without error...
 
\end_layout

\begin_layout Plain Layout

child process 0002 has exited without error...
 
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------- 
\end_layout

\begin_layout Plain Layout

Enter -parallel printlog #- to checkout logfiles.
 
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------- 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example illustrates that many simple tasks can be parallelized.
 This particular task was not executed faster in parallel since parallel
 execution has its own overhead and the task was quite easy.
 The short examples that follow assume that 
\family typewriter
parallel
\family default
 has been setup.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{stexample}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next example shows the usage of the 
\family typewriter
do
\family default
 subcommand.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{stexample}[Example Do-file]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Suppose that we had the existing do-file
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//---------------- make_polynomial.do --------//
\end_layout

\begin_layout Plain Layout

gen price2 = price*price
\end_layout

\begin_layout Plain Layout

gen price3 = price2*price
\end_layout

\begin_layout Plain Layout

gen price4 = price3*price
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can execute it either sequentially or
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 parallel do make_polynomial.do
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{stexample}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{stexample}[Example Bootstrap]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A simple sequential bootstrap would
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 sysuse auto, clear
\end_layout

\begin_layout Plain Layout

.
 bs: reg price c.weig##c.weigh foreign rep
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When parallelized it becomes
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 parallel bs: reg price c.weig##c.weigh foreign rep
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{stexample}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{stexample}[Example Simulation]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Suppose we have the following simulation program.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

program define lnsim, rclass
\end_layout

\begin_layout Plain Layout

  version 14
\end_layout

\begin_layout Plain Layout

  syntax [, obs(integer 1) mu(real 0) sigma(real 1) ]
\end_layout

\begin_layout Plain Layout

  drop _all
\end_layout

\begin_layout Plain Layout

  set obs `obs'
\end_layout

\begin_layout Plain Layout

  tempvar z
\end_layout

\begin_layout Plain Layout

  gen `z' = exp(rnormal(`mu',`sigma'))
\end_layout

\begin_layout Plain Layout

  summarize `z'
\end_layout

\begin_layout Plain Layout

  return scalar mean = r(mean)
\end_layout

\begin_layout Plain Layout

  return scalar Var  = r(Var)         
\end_layout

\begin_layout Plain Layout

end 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If we were to run it sequentially we'd use
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 simulate mean=r(mean) var=r(Var), reps(10000): lnsim, obs(100)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To run it parallel we could instead use a very familiar syntax
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 parallel sim, expr(mean=r(mean) var=r(Var)) reps(10000): ///
\end_layout

\begin_layout Plain Layout

    lnsim, obs(100)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{stexample}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{stexample}[Example Append]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Imagine we have several dta files named 
\family typewriter
income.dta
\family default
 stored in a set of folders ranging from 
\begin_inset Quotes eld
\end_inset

2008_01
\begin_inset Quotes erd
\end_inset

 up to 
\begin_inset Quotes eld
\end_inset

2012_12
\begin_inset Quotes erd
\end_inset

, that is, a total of 60 files ordered which may look something like this:
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

2008_01/income.dta 
\end_layout

\begin_layout Plain Layout

2008_02/income.dta 
\end_layout

\begin_layout Plain Layout

2008_03/income.dta
\end_layout

\begin_layout Plain Layout

...more files...
\end_layout

\begin_layout Plain Layout

2010_01/income.dta 
\end_layout

\begin_layout Plain Layout

2010_02/income.dta 
\end_layout

\begin_layout Plain Layout

2010_03/income.dta
\end_layout

\begin_layout Plain Layout

...more files...
\end_layout

\begin_layout Plain Layout

2012_10/income.dta 
\end_layout

\begin_layout Plain Layout

2012_11/income.dta 
\end_layout

\begin_layout Plain Layout

2012_12/income.dta 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now, imagine that for each and every one of those files we would like to
 execute the following program: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

program def myprogram
\end_layout

\begin_layout Plain Layout

  gen female = (gender == "female")
\end_layout

\begin_layout Plain Layout

  collapse (mean) income, by(female) fast
\end_layout

\begin_layout Plain Layout

end 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of writing a 
\family typewriter
forval
\family default
/
\family typewriter
foreach
\family default
 loop (which would be the natural solution for this situation), 
\family typewriter
parallel append
\family default
 allows us to smoothly solve this with the following command.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.
 parallel append, do(myprogram) prog(myprogram) ///
\end_layout

\begin_layout Plain Layout

	e("%g_%02.0f/income.dta, 2008/2012, 1/12")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where element by element, we are telling 
\family typewriter
parallel
\family default
: 
\end_layout

\begin_layout Itemize

\family typewriter
do(myprogram)
\family default
: execute the command 
\family typewriter
myprogram
\family default
, 
\end_layout

\begin_layout Itemize

\family typewriter
prog(myprogram)
\family default
: 
\family typewriter
myprogram
\family default
 is a user written program that needs to passed to child child processes,
 and 
\end_layout

\begin_layout Itemize

\family typewriter
e("%g_%02.0f/income.dta, 2008/2012, 1/12")
\family default
: this should process files 
\begin_inset Quotes eld
\end_inset

2008_01/income.dta
\begin_inset Quotes erd
\end_inset

 up to 
\begin_inset Quotes eld
\end_inset

2012_12/income.dta
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Besides of the simplicity of its syntax, the advantage of using 
\family typewriter
parallel append
\family default
 lies in doing so in a parallel fashion, that is, instead of processing
 one file at a time, 
\family typewriter
parallel
\family default
 manages to process these files in groups of as many files as child processes
 are set.
 Step-by-step, what this command does is:
\end_layout

\begin_layout Enumerate
Distribute groups of files across child processes
\end_layout

\begin_layout Enumerate
Once each child process starts, for each dta file:
\end_layout

\begin_deeper
\begin_layout Enumerate
Opens the file using [if] [in] accordingly to in and if options.
 
\end_layout

\begin_layout Enumerate
Executes the command/dofile specified by the user.
 
\end_layout

\begin_layout Enumerate
Stores the results in a temporary dta file.
\end_layout

\end_deeper
\begin_layout Enumerate
Finally, once all the files have been processed, append all the resulting
 files into a single one.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{stexample}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parallelizing a loop
\begin_inset CommandInset label
LatexCommand label
name "subsec:Parallelizing-a-loop"

\end_inset


\end_layout

\begin_layout Standard
If a user has a loop where the processing in each iteration are independent
 of each other and the output can be aggregated easily then it is easily
 transformed using 
\family typewriter
parallel
\family default
.
\end_layout

\begin_layout Standard
Suppose we want to parallelize a general loop
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

forval i=1/`num_total'{         
\end_layout

\begin_layout Plain Layout

  //work for i   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can transform this so that a setup that can be done either parallel or
 sequential.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

local n_proc = <number set by user>
\end_layout

\begin_layout Plain Layout

save currdata.dta, replace
\end_layout

\begin_layout Plain Layout

drop _all
\end_layout

\begin_layout Plain Layout

set obs `num_total'
\end_layout

\begin_layout Plain Layout

gen long i = _n
\end_layout

\begin_layout Plain Layout

if `n_proc'>1 {
\end_layout

\begin_layout Plain Layout

  parallel initialize `n_proc'
\end_layout

\begin_layout Plain Layout

  parallel: parfor_task
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

  parfor_task
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//------------parfor_task.ado------------//
\end_layout

\begin_layout Plain Layout

program parfor_task
\end_layout

\begin_layout Plain Layout

  local num_task = _N    
\end_layout

\begin_layout Plain Layout

  mkmat i, matrix(tasks_i)
\end_layout

\begin_layout Plain Layout

  use currdata.dta, clear
\end_layout

\begin_layout Plain Layout

  forval j=1/`=_N'{
\end_layout

\begin_layout Plain Layout

    local i = tasks_i[`j',1]  
\end_layout

\begin_layout Plain Layout

    //work for i   
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  //put output into main data
\end_layout

\begin_layout Plain Layout

end
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Consistency
\begin_inset CommandInset label
LatexCommand label
name "subsec:Sequential-consistency"

\end_inset


\end_layout

\begin_layout Standard
For many tasks we will want to ensure that there is exact consistency between
 multiple runs of a program.
 Deterministic programs virtually ensure this.
 With random functions, a sequential program is usually made consistent
 by specifying a fixed random seed at the beginning of the program.
 If one is always using the same number of child processes then the same
 can be achieved by pre-specifying the seeds with the 
\family typewriter
seeds
\family default
 options.
\end_layout

\begin_layout Standard
A similar notion of sequential consistency guarantees that results do not
 differ between sequential and parallel operations.
 Again, for deterministic programs this is straight-forward to check.
 If the program has a random component then more care must be taken.
 To do this, provide the seed for each repetition.
 Once we do that, we can build upon the previous example about loops (section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Parallelizing-a-loop"

\end_inset

) so that the tasks are split to the child processes and show how to collect
 the output.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{stexample}[Example Sequential consistency]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we do it with a custom bootstrap implementation
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

set seed 1337 
\end_layout

\begin_layout Plain Layout

sysuse auto, clear 
\end_layout

\begin_layout Plain Layout

parallel initialize 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

cap program drop do_work 
\end_layout

\begin_layout Plain Layout

program do_work     
\end_layout

\begin_layout Plain Layout

  args main_data     
\end_layout

\begin_layout Plain Layout

  local num_rep = _N     
\end_layout

\begin_layout Plain Layout

  tempname tasks pfile     
\end_layout

\begin_layout Plain Layout

  mkmat n seed, matrix(`tasks')     
\end_layout

\begin_layout Plain Layout

  qui use "`main_data'", clear     
\end_layout

\begin_layout Plain Layout

  tempfile estimates     
\end_layout

\begin_layout Plain Layout

  postfile `pfile' long(n seed) float(b_mpg) using "`estimates'"     
\end_layout

\begin_layout Plain Layout

  forval i=1/`num_rep'{         
\end_layout

\begin_layout Plain Layout

    local seedi = `tasks'[`i',2]         
\end_layout

\begin_layout Plain Layout

    set seed `seedi'         
\end_layout

\begin_layout Plain Layout

    preserve         
\end_layout

\begin_layout Plain Layout

    bsample         
\end_layout

\begin_layout Plain Layout

    qui reg price mpg         
\end_layout

\begin_layout Plain Layout

    post `pfile' (`=`tasks'[`i',1]') (`seedi') (_b[mpg])         
\end_layout

\begin_layout Plain Layout

    restore     
\end_layout

\begin_layout Plain Layout

  }     
\end_layout

\begin_layout Plain Layout

  postclose `pfile'     
\end_layout

\begin_layout Plain Layout

  use "`estimates'", clear 
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

tempfile maindata 
\end_layout

\begin_layout Plain Layout

save "`maindata'" 
\end_layout

\begin_layout Plain Layout

drop _all 
\end_layout

\begin_layout Plain Layout

gen long seed = .
 
\end_layout

\begin_layout Plain Layout

qui set obs 99 //number of reps
\end_layout

\begin_layout Plain Layout

replace seed = int((-1*`c(minlong)'-1)*runiform())
\end_layout

\begin_layout Plain Layout

gen long n=_n 
\end_layout

\begin_layout Plain Layout

local final_seed = c(seed) 
\end_layout

\begin_layout Plain Layout

parallel, program(do_work): do_work "`maindata'" 
\end_layout

\begin_layout Plain Layout

mata: rseed(st_local("final_seed"))
\end_layout

\begin_layout Plain Layout

sort n
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output be the same no matter the number of child processes or if the
 
\family typewriter
do_work
\family default
 is run without 
\family typewriter
parallel
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{stexample}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parallelizing user commands
\end_layout

\begin_layout Standard
A third-party Stata package developer with easily parallelizable tasks can
 write their packages to take advantage of 
\family typewriter
parallel
\family default
 if it is installed.
 We recommend that packages not require 
\family typewriter
parallel
\family default
 as users may be on machines with limited resources.
 The most common example would be wanting to parallelize an existing loop,
 so one can follow the examples of the parallel for loops or the sequential
 consistency example.
 One can put that secondary program in the original ado file (in which case
 use 
\family typewriter
myado.ado.subtask
\family default
 form) or one can make a separate file.
\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Standard
The 
\family typewriter
parallel
\family default
 command will issue an error if either it or one of its child processes
 encounters an error.
 The first step towards debugging this is to look at the log files (using,
 e.g., 
\family typewriter
parallel viewlog
\family default
).
 If this does not show enough information, 
\family typewriter
trace
\family default
 can be turned on in the executed task or custom diagnostic information
 and be printed.
 
\end_layout

\begin_layout Section
Benchmarks
\begin_inset CommandInset label
LatexCommand label
name "sec:Benchmarks"

\end_inset


\end_layout

\begin_layout Standard
In order to assess the speed-gains obtain when using 
\family typewriter
parallel
\family default
, we present what we think are the two most relevant uses of the module:
 bootstrapping and simulations.
 We compared the performance of running each routine in the following fashions
 on computer with at least four processors
\begin_inset Foot
status open

\begin_layout Plain Layout
Tests were run using StataIC 12.1 on a Unix machine with an Intel i7-4790
 CPU @ 3.60GHz with 8 processors.
\end_layout

\end_inset

: serial, parallel using two child processes, and parallel using four child
 processes.
 While the tasks over which we performed the comparisons are rather simple
 (and not particularly time consuming since all of them took less than a
 minute to complete), they are useful to illustrate the benefits of using
 
\family typewriter
parallel
\family default
.
\end_layout

\begin_layout Standard
It is important to keep in mind that, as we will see, the lack of perfectly
 linear speed-gains is due to the simplicity of the problem with respect
 to the time that it takes to compute it in a serial fashion.
 On the other hand, overall, as the problem size (number of simulations,
 resamples, etc.) increases, the speed-gains do become perfectly linear.
\end_layout

\begin_layout Standard
The code used to perform the benchmarks and generate the figures and tables
 is available in the project's website.
\end_layout

\begin_layout Subsection
Bootstrapping
\end_layout

\begin_layout Standard
In this first benchmark, we use the 
\emph on
auto
\emph default
 dataset shipped with Stata.
 After expanding each observation 10 times–so the size of the problem increases–
we perform a bootstrap of a linear regression model as follows:
\end_layout

\begin_layout Standard
\begin_inset Flex Stlog
status open

\begin_layout Plain Layout

sysuse auto, clear
\end_layout

\begin_layout Plain Layout

expand 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Serial fashion
\end_layout

\begin_layout Plain Layout

bs, rep($size) nodots: regress mpg weight gear foreign
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Parallel fashion
\end_layout

\begin_layout Plain Layout

parallel initialize 2
\end_layout

\begin_layout Plain Layout

parallel bs, rep($size) nodots: regress mpg weight gear foreign
\end_layout

\begin_layout Plain Layout

parallel initialize 4
\end_layout

\begin_layout Plain Layout

parallel bs, rep($size) nodots: regress mpg weight gear foreign
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For each number of repetitions (1000; 2000; 4000) we ran the problem 1000
 times and recorded average computing time.
 The results are presented in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:bootstrap"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand input
filename "tables_and_figures/parallel_benchmarks_test=boottest.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Absolute and relative computing times for each run of a basic bootstrap
 problem.
 For each given problem size, the first row shows the time in seconds that
 each method took on average to complete the task; and the second row shows
 the relative time each method took to complete the task relative to using
 
\family typewriter
parallel
\family default
 with four child processes.
\begin_inset CommandInset label
LatexCommand label
name "tab:bootstrap"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Simulations
\end_layout

\begin_layout Standard
In the case of simulations, we perform a simple 
\change_deleted -1260403458 1540365616
(and uninteresting) 
\change_unchanged
Monte Carlo experiment which consists in two main steps: (1) Generate 1,000
 observations as 
\begin_inset Formula $Y=X\beta+\varepsilon$
\end_inset

 where 
\begin_inset Formula $X\sim N(0,1)$
\end_inset

, 
\begin_inset Formula $\varepsilon\sim N(0,1)$
\end_inset

, and 
\begin_inset Formula $\beta=2$
\end_inset

, and (2) obtain the parameter estimate of 
\begin_inset Formula $\beta$
\end_inset

.
 The code used follows:
\end_layout

\begin_layout Standard
\begin_inset Flex Stlog
status open

\begin_layout Plain Layout

prog def mysim, rclass
\end_layout

\begin_layout Plain Layout

  // Data generating process
\end_layout

\begin_layout Plain Layout

  drop _all
\end_layout

\begin_layout Plain Layout

  set obs 1000 
\end_layout

\begin_layout Plain Layout

  gen eps = rnormal()
\end_layout

\begin_layout Plain Layout

  gen X   = rnormal()
\end_layout

\begin_layout Plain Layout

  gen Y   = X*2 + eps 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  // Estimation
\end_layout

\begin_layout Plain Layout

  reg Y X 
\end_layout

\begin_layout Plain Layout

  mat def ans = e(b)
\end_layout

\begin_layout Plain Layout

  return scalar beta = ans[1,1]
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Serial fashion
\end_layout

\begin_layout Plain Layout

simulate beta=r(beta), reps($size) nodots: mysim
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Parallel fashion
\end_layout

\begin_layout Plain Layout

parallel initialize 2
\end_layout

\begin_layout Plain Layout

parallel sim, reps($size) expr(beta=r(beta)) nodots: mysim
\end_layout

\begin_layout Plain Layout

parallel initialize 4
\end_layout

\begin_layout Plain Layout

parallel sim, reps($size) expr(beta=r(beta)) nodots: mysim
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As before, for each number of simulations (1
\change_inserted -1260403458 1540365627
,
\change_unchanged
000; 2
\change_inserted -1260403458 1540365629
,
\change_unchanged
000; 4
\change_inserted -1260403458 1540365630
,
\change_unchanged
000), we ran the problem 1
\change_inserted -1260403458 1540365633
,
\change_unchanged
000 times and recorded average computing time.
 The results are presented in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:simulation"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand input
filename "tables_and_figures/parallel_benchmarks_test=simtest.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Absolute and relative computing times for each run of a simple Monte Carlo
 exercise.
 For each given problem size, the first row shows the time in seconds that
 each method took on average to complete the task; and the second row shows
 the relative time each method took to complete the task relative to using
 
\family typewriter
parallel
\family default
 with four child processes.
\begin_inset CommandInset label
LatexCommand label
name "tab:simulation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Discussion
\begin_inset CommandInset label
LatexCommand label
name "sec:discussion"

\end_inset


\end_layout

\begin_layout Subsection
Development and feedback
\begin_inset CommandInset label
LatexCommand label
name "sec:development"

\end_inset


\end_layout

\begin_layout Standard
In case one would like to report a bug or feature request, check first if
 there is an existing issue at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/gvegayon/parallel/issues
\end_layout

\end_inset

.
 Please also try the latest development version to see if the problem has
 been solved already (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Installation"

\end_inset

).
 If these do not resolve the concern, please submit an issue at the GitHub
 issue address so that anyone available may help to solve the issue.
 Include in the issue the steps to reproduce the issue and the output of
 the 
\family typewriter
creturn list
\family default
.
 
\end_layout

\begin_layout Subsection
Conclusion
\end_layout

\begin_layout Standard
The 
\family typewriter
parallel
\family default
 package allows users to take advantage of multiprocessor machines for many
 generic tasks with a minimum of additional complexity.
 For tasks where the processor is the limiting factor and that are easily
 parallelizable, 
\family typewriter
parallel
\family default
 may significantly speed up execution.
 We hope that this package is used not just for ad-hoc processes but can
 be integrated into other packages as a recommended package.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "parallel"
options "sj"

\end_inset


\end_layout

\begin_layout AboutAuthors
George G.
 Vega Yon is a Research Programmer at the University of Southern California.
\end_layout

\begin_layout AboutAuthors
Brian Quistorff is an Economic Researcher at Microsoft AI & Research.
\end_layout

\end_body
\end_document
